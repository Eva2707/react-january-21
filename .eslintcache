[{"/Users/evgeniyakharanen/my-react-app/src/index.js":"1","/Users/evgeniyakharanen/my-react-app/src/reportWebVitals.js":"2","/Users/evgeniyakharanen/my-react-app/src/components/message.js":"3","/Users/evgeniyakharanen/my-react-app/src/components/messageField.js":"4","/Users/evgeniyakharanen/my-react-app/src/Layout.js":"5","/Users/evgeniyakharanen/my-react-app/src/components/ChatList2.js":"6","/Users/evgeniyakharanen/my-react-app/src/components/Header.js":"7"},{"size":503,"mtime":1612042483068,"results":"8","hashOfConfig":"9"},{"size":362,"mtime":1611132620492,"results":"10","hashOfConfig":"9"},{"size":1353,"mtime":1612041675435,"results":"11","hashOfConfig":"9"},{"size":1518,"mtime":1612047481249,"results":"12","hashOfConfig":"9"},{"size":769,"mtime":1612046803536,"results":"13","hashOfConfig":"9"},{"size":621,"mtime":1612045712184,"results":"14","hashOfConfig":"9"},{"size":4281,"mtime":1612046474129,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1xlqgxd",{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"20"},"/Users/evgeniyakharanen/my-react-app/src/index.js",[],"/Users/evgeniyakharanen/my-react-app/src/reportWebVitals.js",[],["32","33"],"/Users/evgeniyakharanen/my-react-app/src/components/message.js",[],"/Users/evgeniyakharanen/my-react-app/src/components/messageField.js",[],"/Users/evgeniyakharanen/my-react-app/src/Layout.js",[],"/Users/evgeniyakharanen/my-react-app/src/components/ChatList2.js",[],"/Users/evgeniyakharanen/my-react-app/src/components/Header.js",["34","35"],"import React from 'react';\nimport clsx from 'clsx';\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\nimport Drawer from '@material-ui/core/Drawer';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport List from '@material-ui/core/List';\nimport Typography from '@material-ui/core/Typography';\nimport Divider from '@material-ui/core/Divider';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport InboxIcon from '@material-ui/icons/MoveToInbox';\nimport MailIcon from '@material-ui/icons/Mail';\nimport ForumIcon from '@material-ui/icons/Forum';\n\nconst drawerWidth = 240;\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n  },\n  appBar: {\n    transition: theme.transitions.create(['margin', 'width'], {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen,\n    }),\n  },\n  appBarShift: {\n    width: `calc(100% - ${drawerWidth}px)`,\n    transition: theme.transitions.create(['margin', 'width'], {\n      easing: theme.transitions.easing.easeOut,\n      duration: theme.transitions.duration.enteringScreen,\n    }),\n    marginRight: drawerWidth,\n  },\n  title: {\n    flexGrow: 1,\n  },\n  hide: {\n    display: 'none',\n  },\n  drawer: {\n    width: drawerWidth,\n    flexShrink: 0,\n  },\n  drawerPaper: {\n    width: drawerWidth,\n  },\n  drawerHeader: {\n    display: 'flex',\n    alignItems: 'center',\n    ...theme.mixins.toolbar,\n    justifyContent: 'flex-start',\n  },\n  content: {\n    flexGrow: 1,\n    transition: theme.transitions.create('margin', {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen,\n    }),\n    marginRight: -drawerWidth,\n  },\n  contentShift: {\n    transition: theme.transitions.create('margin', {\n      easing: theme.transitions.easing.easeOut,\n      duration: theme.transitions.duration.enteringScreen,\n    }),\n    marginRight: 0,\n  },\n}));\n\nexport default function PersistentDrawerRight() {\n  const classes = useStyles();\n  const theme = useTheme();\n  const [open, setOpen] = React.useState(false);\n  const [welcome] = React.useState('Welcome to my World')\n\n  const handleDrawerOpen = () => {\n    setOpen(true);\n  };\n\n  const handleDrawerClose = () => {\n    setOpen(false);\n  };\n\n  return (\n    <div className={classes.root}>\n      <CssBaseline />\n      <AppBar\n        position=\"fixed\"\n        className={clsx(classes.appBar, {\n          [classes.appBarShift]: open,\n        })}\n      >\n        <Toolbar>\n          <Typography variant=\"h6\" noWrap className={classes.title}>\n            {welcome}\n          </Typography>\n          <IconButton\n            color=\"inherit\"\n            aria-label=\"open drawer\"\n            edge=\"end\"\n            onClick={handleDrawerOpen}\n            className={clsx(open && classes.hide)}\n          >\n            <ForumIcon />\n          </IconButton>\n        </Toolbar>\n      </AppBar>\n      <main\n        className={clsx(classes.content, {\n          [classes.contentShift]: open,\n        })}\n      >\n        <div className={classes.drawerHeader} />\n      </main>\n      <Drawer\n        className={classes.drawer}\n        variant=\"persistent\"\n        anchor=\"right\"\n        open={open}\n        classes={{\n          paper: classes.drawerPaper,\n        }}\n      >\n        <div className={classes.drawerHeader}>\n          <IconButton onClick={handleDrawerClose}>\n            {theme.direction === 'rtl' ? <ChevronLeftIcon /> : <ChevronRightIcon />}\n          </IconButton>\n        </div>\n        <Divider />\n        <List>\n          {['Alex', 'Sandra', 'Julia', 'Katarina'].map((text, index) => (\n            <ListItem button key={text}>\n              <ListItemIcon>{<MailIcon />}</ListItemIcon>\n              <ListItemText primary={text} />\n            </ListItem>\n          ))}\n        </List>\n        <Divider />\n      </Drawer>\n    </div>\n  );\n}",{"ruleId":"36","replacedBy":"37"},{"ruleId":"38","replacedBy":"39"},{"ruleId":"40","severity":1,"message":"41","line":12,"column":8,"nodeType":"42","messageId":"43","endLine":12,"endColumn":16},{"ruleId":"40","severity":1,"message":"44","line":18,"column":8,"nodeType":"42","messageId":"43","endLine":18,"endColumn":17},"no-native-reassign",["45"],"no-negated-in-lhs",["46"],"no-unused-vars","'MenuIcon' is defined but never used.","Identifier","unusedVar","'InboxIcon' is defined but never used.","no-global-assign","no-unsafe-negation"]